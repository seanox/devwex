<?xml version="1.0" ?>
<project name="devwex" default="usage" basedir=".">
  <target name="usage">
    <echo>                                                    </echo>
    <echo> the following targets are available ...            </echo>
    <echo>                                                    </echo>
    <echo>   compile  compile and build classes               </echo>
    <echo>   archive  compile, build classes and make archives</echo>
    <echo>            for distribution and developing         </echo>
    <echo>   clean    removed all workfiles                   </echo>
  </target>
    
  <property name="workspace" value=".."/>
  <property name="workspace.sources" value="${workspace}/sources"/>
  <property name="workspace.classes" value="${workspace}/program/classes"/>
  <property name="workspace.program" value="${workspace}/program"/>
  <property name="workspace.developing" value="${workspace}/developing"/>
  <property name="workspace.manuals" value="${workspace}/manuals"/>
  <property name="workspace.system" value="${workspace}/system"/>
  <property name="workspace.documents" value="${workspace}/documents"/>
  
  <property name="build" value="${workspace}/build"/>
  <property name="build.sources.filter" value="**/*.java,**/*.txt,**/*.css,**/*.html,**/*.ini"/>
  <property name="build.extras" value="${workspace}/developing/extras"/>
  <property name="build.sources" value="${build}/sources"/>
  <property name="build.classes" value="${build}/classes"/>
  <property name="build.project" value="${build}/${ant.project.name}"/>
  <property name="build.manuals" value="${build.project}/manuals"/>
  <property name="build.system" value="${build.project}/system"/>
  <property name="build.documents" value="${build.project}/documents"/>
  
  <property name="release" value="${workspace}/release"/>
  
  <property name="releases" value="${workspace}/releases"/>
  
  <property name="compile.target" value="5"/>
  <property name="compile.source" value="5"/>
  <property name="compile.debug" value="off"/>
  <property name="compile.optimize" value="on"/>
  <property name="compile.deprecation" value="on"/>
  
  <target name="changes">
    <copy file="${workspace.developing}/release.txt" tofile="${workspace}/CHANGES" overwrite="true"/>
    <replaceregexp file="${workspace}/CHANGES" match="&#x00E4;" replace="ae" flags="g"/>
    <replaceregexp file="${workspace}/CHANGES" match="&#x00C4;" replace="Ae" flags="g"/>
    <replaceregexp file="${workspace}/CHANGES" match="&#x00F6;" replace="oe" flags="g"/>
    <replaceregexp file="${workspace}/CHANGES" match="&#x00D6;" replace="Oe" flags="g"/>
    <replaceregexp file="${workspace}/CHANGES" match="&#x00FC;" replace="ue" flags="g"/>
    <replaceregexp file="${workspace}/CHANGES" match="&#x00DC;" replace="Ue" flags="g"/>
      
    <copy file="${workspace.developing}/release.txt" tofile="${workspace.developing}/release.tmp" overwrite="true"/>
    <replaceregexp file="${workspace.developing}/release.tmp" match="^\s+" replace="" byline="false"/>
    <replaceregexp file="${workspace.developing}/release.tmp" match="(?s)^(.*?)[\r\n]+\d[\d\. x]+.*$" replace="\1" byline="false"/>
    <replaceregexp file="${workspace.developing}/release.tmp" match="^(.*?)\s*$" replace="\1  " flags="g" byline="true"/>
    <replaceregexp file="${workspace.developing}/release.tmp" match="^(\d[\.\d x]+)[^\r\n]*" replace="## \1" byline="false"/>
    <replaceregexp file="${workspace.developing}/release.tmp" match="^ +([A-Z]+:.*)\s*$" replace="\1" byline="true"/>
    <replaceregexp file="${workspace.developing}/release.tmp" match="(?s)[\r\n]+ [^\r\n]+" replace="" flags="g" byline="false"/>  
    <replaceregexp file="${workspace.developing}/release.tmp" match="^(## \d[\.\d]+ \d+)(  )" replace="\1 (summary of the current version)\2" flags="g" byline="true"/>
    <replaceregexp file="${workspace.developing}/release.tmp" match="^(## \d[\.\d]+ [\dx]+)(  )" replace="\1 (summary of the next version)\2" flags="g" byline="true"/>
    <loadresource property="changes">
      <file file="${workspace.developing}/release.tmp"/>
    </loadresource>
    <delete file="${workspace.developing}/release.tmp"/>
    <replaceregexp file="${workspace}/README.md"
      match="(?si)(# Changes \(Change Log\)\s+).*?(\[Read more\])" flags="g" byline="false"
      replace="\1${changes}${line.separator}${line.separator}\2"/>
  </target>
  
  <target name="compress" if="windows">
    <delete file="${workspace.program}/${ant.project.name}.jar"/>
    <unzip src="${build.extras}/compress.zip" dest="${build}"/>
    <property name="compress1" value="a ${workspace.program}/${ant.project.name}.jar"/>
    <property name="compress2" value="-tzip -mm=Deflate -mx9 -md=64k -mfb=128 -mpass=10"/>
    <property name="compress3" value="${build.classes}/com"/>
    <exec executable="${build}/7z/7za.exe">
      <arg line="${compress1} ${compress2} ${compress3}"/>
    </exec>
  </target> 
  
  <macrodef name="release-locate">
    <sequential>
      <copy file="${workspace.developing}/release.txt" tofile="${workspace.developing}/release.tmp" overwrite="true"/>
      <replaceregexp file="${workspace.developing}/release.tmp"
        match="(?s)^\s*([\d\.x]+) (\d{4})([\dx]+).*$" flags="g" byline="false"
        replace="release.version=\1&#x000D;release.year=\2&#x000D;release.date=\2\3&#x000D;"/>
      <replaceregexp file="${workspace.developing}/release.tmp" match="x+" replace="0000" flags="g" byline="false"/>
      <loadproperties>
        <file file="${workspace.developing}/release.tmp"/>
      </loadproperties>
      <delete file="${workspace.developing}/release.tmp"/>
    </sequential>
  </macrodef>
  
  <macrodef name="release-insert">
    <sequential>
      <replace dir="${build}" includes="${build.sources.filter}"
        token="#[ant:release-year]" value="${release.year}"/>
      <replace dir="${build}" includes="${build.sources.filter}"
        token="#[ant:release-month]" value="${release.month}"/>
      <replace dir="${build}" includes="${build.sources.filter}"
        token="#[ant:release-day]" value="${release.day}"/>
      <replace dir="${build}" includes="${build.sources.filter}"
        token="#[ant:release-date]" value="${release.date}"/>
      <replace dir="${build}" includes="${build.sources.filter}"
        token="#[ant:release-version]" value="${release.version}"/>        
    </sequential>
  </macrodef>  

  <target name="compile">
    <release-locate/>
    <delete dir="${build}"/> 
    <mkdir dir="${build.sources}"/>    
    <copy todir="${build.sources}">
      <fileset dir="${workspace.sources}"/>
    </copy>    
    <release-insert/>
    <mkdir dir="${build.classes}"/>    
    <javac srcdir="${build.sources}" destdir="${build.classes}" 
      source="${compile.source}" target="${compile.target}" includeantruntime="false"
      debug="${compile.debug}" optimize="${compile.optimize}" deprecation="${compile.deprecation}">
      <compilerarg value="-Xlint:-options"/>
    </javac>
    <touch datetime="${release.date}" pattern="yyyyMMdd">
      <fileset dir="${build.classes}"/>
    </touch>
    <zip destfile="${workspace.program}/${ant.project.name}.jar"
      basedir="${build.classes}" compress="true" filesonly="true"/>    
    <condition property="windows" value="true">
      <os family="windows"/>
    </condition>
    <condition property="windows" value="true">
      <os family="unix"/>
    </condition>   
    <antcall target="compress"/>
    <delete dir="${build}"/>
  </target>  
  
  <target name="keystore">
    <delete file="${workspace.program}/keystore"/>
    <exec executable="keytool">
      <arg line="-genkey -alias Server -dname 'CN=127.0.0.1'
        -keystore '${workspace.program}/keystore' -keypass changeIt -storepass changeIt
        -keyalg RSA -keysize 2048 -validity 365"/>
    </exec>
  </target>  

  <macrodef name="compress-markup-insert">
    <attribute name="file"/>
    <attribute name="content"/>
    <sequential>
      <replaceregexp file="@{file}" match="^(\s*)&lt;link rel=&quot;stylesheet&quot; href=&quot;@{content}&quot;/&gt;" flags="g" byline="true"
        replace="\1&lt;style type=&quot;text/css&quot;&gt;${line.separator}:::@{content}${line.separator}\1&lt;/style&gt;"/>
      <replaceregexp file="@{file}" match="^(\s*)&lt;script src=&quot;@{content}&quot;&gt;&lt;/script&gt;" flags="g" byline="true"
        replace="\1&lt;script type=&quot;text/javascript&quot;&gt;${line.separator}:::@{content}${line.separator}\1&lt;/script&gt;"/>
      <replace file="@{file}" token=":::@{content}" value="${file.@{content}}"/>
    </sequential>
  </macrodef>

  <macrodef name="compress-markup-clean">
    <attribute name="file"/>
    <sequential>
      <replaceregexp file="@{file}" match="(?s)[\r\n]+\s*&lt;link[^&gt;]+?&gt;" flags="g" byline="false" replace=""/>
      <replaceregexp file="@{file}" match="(?s)[\r\n]+\s*&lt;script[^&gt;]*?\ssrc=.*?&lt;/script&gt;" flags="g" byline="false" replace=""/>
      <replaceregexp file="@{file}" match="(?s)[\r\n]+\s*&lt;link[^&gt;]+?&gt;" flags="g" byline="false" replace="" />
      <replaceregexp file="@{file}" match="(?s)(\s*)&lt;/style&gt;\s*&lt;style[^&lt;]*?&gt;\s*" flags="g" byline="false"
        replace="\1  "/>
      <replaceregexp file="@{file}" match="(?s)(\s*)&lt;/script&gt;\s*&lt;script[^&lt;]*?&gt;\s*" flags="g" byline="false"
        replace="\1  "/>
    </sequential>
  </macrodef>
  
  <macrodef name="compress-markup">
    <attribute name="file"/>
    <sequential>
      <echo>compress: @{file}</echo> 
      <compress-markup-insert file="@{file}" content="seanox-devwex.js"/>     
      <compress-markup-insert file="@{file}" content="seanox-devwex.css"/>
      <compress-markup-insert file="@{file}" content="common.css"/>     
      <compress-markup-insert file="@{file}" content="index.css"/>          
      <compress-markup-insert file="@{file}" content="status.css"/>
      <compress-markup-clean file="@{file}"/>
      <replaceregexp file="@{file}" match="^\s+" flags="g" replace="" byline="false"/>
      <replaceregexp file="@{file}" match="\s+$" flags="g" replace="" byline="true"/>      
    </sequential>
  </macrodef>

  <macrodef name="compress-javascript">
    <attribute name="file"/>
    <sequential>
      <echo>compress: @{file}</echo> 
      <replaceregexp file="@{file}" match="(?s)/\*.*?\*/" flags="g" replace="" byline="false"/>
      <replaceregexp file="@{file}" match="\s*//.*$" flags="g" replace="" byline="true"/>
      <replaceregexp file="@{file}" match="\t" flags="g" replace=" " byline="true"/>
      <replaceregexp file="@{file}" match="(?s)\s*[\r\n]+" flags="g" replace="${line.separator}" byline="false"/>
      <replaceregexp file="@{file}" match="(?s)(\{)[\r\n]+\s*" flags="g" replace="\1" byline="false"/>
      <replaceregexp file="@{file}" match="(?s)[\r\n]+ +(?=\})" flags="g" replace="" byline="false"/>
      <replaceregexp file="@{file}" match="(?s)[\r\n]+ +(?!\})" flags="g" replace=" " byline="false"/>
      <replaceregexp file="@{file}" match="(?s)[\r\n]+ *(\})" flags="g" replace="\1" byline="false"/>
      <replaceregexp file="@{file}" match="(?i)[\r\n]+([a-z0-9_\.]+\s*[=;])" flags="g" replace=" \1" byline="false"/>
      <replaceregexp file="@{file}" match="^\s+" flags="g" replace="" byline="false"/>
      <replaceregexp file="@{file}" match="\s+$" flags="g" replace="" byline="true"/>
      <replaceregexp file="@{file}" match="^(.*)$" flags="g" replace="      \1" byline="true"/>
      <basename property="name-@{file}" file="@{file}"/>
      <loadfile property="file.${name-@{file}}" srcFile="@{file}"/>
      <delete file="@{file}"/>
    </sequential>
  </macrodef>

  <macrodef name="compress-stylesheet">
    <attribute name="file"/>
    <sequential>
      <echo>compress: @{file}</echo> 
      <replaceregexp file="@{file}" match="(?s)/\*.*?\*/" flags="g" replace="" byline="false"/>
      <replaceregexp file="@{file}" match="\t" flags="g" replace=" " byline="true"/>
      <replaceregexp file="@{file}" match="(?s)\s*[\r\n]+" flags="g" replace="${line.separator}" byline="false"/>
      <replaceregexp file="@{file}" match="(?s)\s*(:)\s*" flags="g" replace="\1" byline="false"/>
      <replaceregexp file="@{file}" match="(?s)\s*(\()\s*" flags="g" replace="\1" byline="false"/>
      <replaceregexp file="@{file}" match="(?s)\s*(\))\s*" flags="g" replace="\1 " byline="false"/>
      <replaceregexp file="@{file}" match="(?s)\s*(;) +" flags="g" replace="\1 " byline="false"/>
      <replaceregexp file="@{file}" match="(?&lt;=[^;\s\{\}])\s*(?=[\r\n]+\s*\})" flags="g" replace=";" byline="false"/>
      <replaceregexp file="@{file}" match="(?s)(,)\s*[\r\n]+\s*" flags="g" replace="\1 " byline="false"/>
      <replaceregexp file="@{file}" match="(?s)(;)\s*[\r\n]+\s*(?=[a-zA-Z])" flags="g" replace="\1 " byline="false"/>
      <replaceregexp file="@{file}" match="(?s)(;)\s*(\})" flags="g" replace="\1\2" byline="false"/>
      <replaceregexp file="@{file}" match="(?s)(\{ *)[\r\n]+" flags="g" replace="\1" byline="false"/>
      <replaceregexp file="@{file}" match="(\{)(\s*.*?\{)" flags="g" replace="\1${line.separator}\2" byline="true"/>      
      <replaceregexp file="@{file}" match="(\{) +" flags="g" replace="\1" byline="true"/>      
      <replaceregexp file="@{file}" match="(?s)[\r\n]+[^\r\n]+\{\s*\}" flags="g" replace="" byline="false"/>
      <replaceregexp file="@{file}" match="^\s+" flags="g" replace="" byline="false"/>
      <replaceregexp file="@{file}" match="\s+$" flags="g" replace="" byline="true"/>
      <replaceregexp file="@{file}" match="^(.*)$" flags="g" replace="      \1" byline="true"/>
      <basename property="name-@{file}" file="@{file}"/>
      <loadfile property="file.${name-@{file}}" srcFile="@{file}"/>
      <delete file="@{file}"/>
    </sequential>
  </macrodef>

  <target name="archive" depends="compile,keystore">
    <delete dir="${build}"/>
    <mkdir dir="${build}"/>
    <mkdir dir="${build.project}"/>
    <copy todir="${build.manuals}">
      <fileset dir="${workspace.manuals}" excludes="seanox-translator.js"/>
    </copy>
    <compress-javascript file="${build.manuals}/seanox-devwex.js"/>
    <compress-stylesheet file="${build.manuals}/seanox-devwex.css"/>  
    <copy todir="${build.system}">
      <fileset dir="${workspace.system}"/>
    </copy>
    <compress-stylesheet file="${build.system}/common.css"/>
    <compress-stylesheet file="${build.system}/index.css"/>
    <compress-stylesheet file="${build.system}/status.css"/>
    <copy todir="${build.documents}">
      <fileset dir="${workspace.documents}"/>
    </copy>
    <compress-markup file="${build.manuals}/seanox-devwex_de.html"/>
    <compress-markup file="${build.manuals}/seanox-devwex_en.html"/>    
    <compress-markup file="${build.system}/index.html"/>
    <compress-markup file="${build.system}/status-2xx.html"/>
    <compress-markup file="${build.system}/status-3xx.html"/>
    <compress-markup file="${build.system}/status-4xx.html"/>
    <compress-markup file="${build.system}/status-5xx.html"/>   
    <compress-markup file="${build.documents}/index.html"/>
    <release-insert/>
    <mkdir dir="${build.project}/storage"/>
    <copy file="${workspace}/LICENSE" tofile="${build.project}/license.txt"/>
    <copy file="${workspace}/developing/release.txt" todir="${build.project}"/>
    <copy todir="${build.project}/program">
      <fileset dir="${workspace}/program">
        <include name="${ant.project.name}.bat"/>
        <include name="${ant.project.name}.ini"/>
        <include name="${ant.project.name}.jar"/>
        <include name="${ant.project.name}.sh"/>
        <include name="keystore"/>
      </fileset>
    </copy>  
    <touch datetime="${release.date}" pattern="yyyyMMdd">
      <fileset dir="${build}"/>
    </touch>
    <delete file="${releases}/seanox-${ant.project.name}-${release.version}.zip"/>
    <zip destfile="${releases}/seanox-${ant.project.name}-${release.version}.zip"
      basedir="${build}" compress="true" filesonly="false" defaultexcludes="false"/>
    <touch datetime="${release.date}" pattern="yyyyMMdd"
      file="${releases}/seanox-${ant.project.name}-${release.version}.zip"/>
    <delete dir="${build}"/>
    
    <!-- TODO: create source archive -->
  </target>
  
  <!-- TODO target:clean -->
</project>